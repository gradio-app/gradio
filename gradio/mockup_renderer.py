"""
Gradio Mockup HTML Renderer Module

This module provides functionality to convert structured mockup data (generated by MockupParser)
into HTML with CSS styling that resembles the Gradio interface.

Functions:
    generate_mockup_html: Main function to generate complete HTML document from parsed mockup data.
    _render_component: Helper function to render individual components to HTML.

Example:
    >>> from gradio.mockup import MockupParser
    >>> from gradio.mockup_renderer import generate_mockup_html
    >>> ascii_art = '[textbox] "Name"\\n[button] "Submit"'
    >>> parsed = MockupParser.parse(ascii_art)
    >>> html = generate_mockup_html(parsed)
    >>> print(html[:50])
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            .gradio-
"""


def generate_mockup_html(parsed_mockup: dict) -> str:
    """
    Generate complete HTML document from parsed mockup data.
    
    This function takes structured mockup data (as generated by MockupParser)
    and converts it into a complete HTML document with embedded CSS styling
    that resembles the Gradio interface.
    
    Args:
        parsed_mockup (dict): Dictionary containing parsed mockup data with a 'layout' key.
                             The 'layout' value should be a list of component dictionaries.
                             
    Returns:
        str: Complete HTML document as a string, ready to be saved to a file.
        
    Example:
        >>> parsed_data = {
        ...     'layout': [
        ...         {'type': 'textbox', 'label': 'Name', 'lines': 1},
        ...         {'type': 'button', 'label': 'Submit'}
        ...     ]
        ... }
        >>> html = generate_mockup_html(parsed_data)
        >>> 'class="gradio-mockup"' in html
        True
        
    The generated HTML includes:
        - Responsive CSS styling that matches Gradio's appearance
        - Proper semantic HTML structure
        - Support for all component types (textbox, slider, button, checkbox)
        - Container layouts (row/column) with flexbox styling
    """
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            .gradio-mockup { 
                font-family: sans-serif; 
                max-width: 600px; 
                margin: 20px auto; 
                padding: 20px; 
                border: 1px solid #e0e0e0; 
                border-radius: 8px; 
                background: #f9f9f9; 
            }
            .component { 
                margin: 15px 0; 
                padding: 15px; 
                background: white; 
                border-radius: 4px; 
                box-shadow: 0 2px 4px rgba(0,0,0,0.05); 
            }
            .container { 
                display: flex; 
                gap: 15px; 
                margin: 15px 0; 
            }
            .row { flex-direction: row; }
            .column { flex-direction: column; }
            label { 
                display: block; 
                margin-bottom: 8px; 
                font-weight: 600; 
                color: #333; 
            }
            input[type="text"], textarea { 
                width: 100%; 
                padding: 10px; 
                border: 1px solid #ddd; 
                border-radius: 4px; 
            }
            textarea { min-height: 80px; }
            button { 
                padding: 10px 20px; 
                background: #4CAF50; 
                color: white; 
                border: none; 
                border-radius: 4px; 
                cursor: pointer; 
            }
            .slider-container { 
                padding: 15px 0; 
                width: 100%; 
            }
            .container-label {
                font-weight: bold;
                margin-bottom: 10px;
                padding: 8px;
                background: #e8e8e8;
                border-radius: 4px;
            }
            .tabs {
                border: 1px solid #ddd;
                border-radius: 4px;
            }
            .tab {
                border-left: 3px solid #4CAF50;
                margin: 10px 0;
            }
            .accordion {
                border: 1px solid #ddd;
                border-radius: 4px;
                margin: 10px 0;
            }
            select {
                width: 100%;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
            }
            .radio-group, .checkbox-group {
                display: flex;
                flex-direction: column;
                gap: 8px;
                margin-top: 8px;
            }
            .radio-group label, .checkbox-group label {
                display: flex;
                align-items: center;
                gap: 8px;
                font-weight: normal;
                margin-bottom: 0;
            }
            .image-placeholder, .video-placeholder, .audio-placeholder, .plot-placeholder, .html-placeholder {
                background: #f0f0f0;
                border: 2px dashed #ccc;
                border-radius: 4px;
                padding: 40px;
                text-align: center;
                color: #666;
                font-size: 18px;
            }
            .dataframe-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 8px;
            }
            .dataframe-table th, .dataframe-table td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }
            .dataframe-table th {
                background: #f5f5f5;
                font-weight: bold;
            }
            .chatbot-container {
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 15px;
                height: 200px;
                overflow-y: auto;
                background: #fafafa;
                margin-bottom: 10px;
            }
            .chat-message {
                margin: 8px 0;
                padding: 8px;
                border-radius: 4px;
            }
            .chat-message.user {
                background: #e3f2fd;
                margin-left: 20px;
            }
            .chat-message.bot {
                background: #f5f5f5;
                margin-right: 20px;
            }
            .chat-input {
                display: flex;
                gap: 10px;
            }
            .chat-input input {
                flex: 1;
            }
            .chat-input button {
                margin: 0;
            }
            .markdown {
                background: transparent;
                box-shadow: none;
                padding: 10px 0;
            }
            .markdown-content {
                color: #333;
                line-height: 1.6;
            }
            .highlighted-text {
                font-family: monospace;
                padding: 10px;
                background: #f8f8f8;
                border-radius: 4px;
            }
            .highlight-add {
                background: #d4edda;
                color: #155724;
                padding: 2px 4px;
                border-radius: 2px;
            }
            .highlight-remove {
                background: #f8d7da;
                color: #721c24;
                padding: 2px 4px;
                border-radius: 2px;
            }
            .file-upload {
                border: 2px dashed #ddd;
                border-radius: 4px;
                padding: 20px;
                text-align: center;
                background: #fafafa;
            }
            .file-placeholder {
                margin-top: 10px;
                color: #666;
            }
            .upload-button {
                background: #2196F3 !important;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 16px;
            }
        </style>
    </head>
    <body>
        <div class="gradio-mockup">
    """
    
    for element in parsed_mockup["layout"]:
        if element["type"] in ["row", "column", "tabs", "tab", "accordion"]:
            html += f'<div class="container {element["type"]}">'
            if element["type"] in ["tabs", "tab", "accordion"]:
                html += f'<div class="container-label">{element.get("label", "")}</div>'
            for comp in element["elements"]:
                html += _render_component(comp)
            html += "</div>"
        else:
            html += _render_component(element)
    
    html += "</div></body></html>"
    return html

def _render_component(comp: dict) -> str:
    """
    Render a single component to HTML.
    
    This helper function takes a component dictionary and converts it into
    the appropriate HTML representation with proper styling classes.
    
    Args:
        comp (dict): Component dictionary containing 'type' and component-specific properties.
                    Common properties include:
                    - type: Component type (textbox, slider, button, checkbox)
                    - label: Display label for the component
                    - lines: Number of lines for textbox (textbox only)
                    - min, max: Range values for slider (slider only)
                    
    Returns:
        str: HTML string representing the component, or empty string for unknown types.
        
    Example:
        >>> comp = {'type': 'textbox', 'label': 'Name', 'lines': 1}
        >>> html = _render_component(comp)
        >>> 'input type="text"' in html
        True
        >>> 'placeholder="Name"' in html
        True
        
    Supported component types:
        - textbox: Renders as <input type="text"> or <textarea> based on lines
        - slider: Renders as <input type="range"> with min/max attributes
        - button: Renders as <button> element
        - checkbox: Renders as <input type="checkbox"> with label
    """
    comp_type = comp["type"]
    if comp_type == "textbox":
        if comp["lines"] > 1:
            return f"""
            <div class=\"component\">
                <label>{comp['label']}</label>
                <textarea placeholder=\"{comp['label']}\"></textarea>
            </div>
            """
        else:
            return f"""
            <div class=\"component\">
                <label>{comp['label']}</label>
                <input type=\"text\" placeholder=\"{comp['label']}\" />
            </div>
            """
    elif comp_type == "slider":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"slider-container\">
                <input type=\"range\" min=\"{comp['min']}\" max=\"{comp['max']}\" value=\"{comp['min']}\" />
            </div>
        </div>
        """
    elif comp_type == "button":
        return f"""
        <div class=\"component\">
            <button>{comp['label']}</button>
        </div>
        """
    elif comp_type == "checkbox":
        return f"""
        <div class=\"component\">
            <label>
                <input type=\"checkbox\"> {comp['label']}
            </label>
        </div>
        """
    elif comp_type in ["row", "column", "tabs", "tab", "accordion"]:
        # Handle nested containers
        html = f'<div class="container {comp_type}">'
        if comp_type in ["tabs", "tab", "accordion"]:
            html += f'<div class="container-label">{comp.get("label", "")}</div>'
        for nested_comp in comp["elements"]:
            html += _render_component(nested_comp)
        html += "</div>"
        return html
    elif comp_type == "dropdown":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <select>
                <option>Choose an option</option>
                <option>Option 1</option>
                <option>Option 2</option>
            </select>
        </div>
        """
    elif comp_type == "radio":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"radio-group\">
                <label><input type=\"radio\" name=\"{comp['label']}\" value=\"option1\"> Option 1</label>
                <label><input type=\"radio\" name=\"{comp['label']}\" value=\"option2\"> Option 2</label>
            </div>
        </div>
        """
    elif comp_type == "checkboxgroup":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"checkbox-group\">
                <label><input type=\"checkbox\" name=\"{comp['label']}\"> Option 1</label>
                <label><input type=\"checkbox\" name=\"{comp['label']}\"> Option 2</label>
            </div>
        </div>
        """
    elif comp_type == "number":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <input type=\"number\" placeholder=\"Enter a number\" />
        </div>
        """
    elif comp_type == "image":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"image-placeholder\">📷 Image Component</div>
        </div>
        """
    elif comp_type == "video":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"video-placeholder\">🎥 Video Component</div>
        </div>
        """
    elif comp_type == "audio":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"audio-placeholder\">🎵 Audio Component</div>
        </div>
        """
    elif comp_type == "dataframe":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <table class=\"dataframe-table\">
                <thead>
                    <tr><th>Column 1</th><th>Column 2</th><th>Column 3</th></tr>
                </thead>
                <tbody>
                    <tr><td>Data 1</td><td>Data 2</td><td>Data 3</td></tr>
                    <tr><td>Data 4</td><td>Data 5</td><td>Data 6</td></tr>
                </tbody>
            </table>
        </div>
        """
    elif comp_type == "chatbot":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"chatbot-container\">
                <div class=\"chat-message user\">👤 Hello!</div>
                <div class=\"chat-message bot\">🤖 Hi there! How can I help you?</div>
            </div>
            <div class=\"chat-input\">
                <input type=\"text\" placeholder=\"Type a message...\" />
                <button>Send</button>
            </div>
        </div>
        """
    elif comp_type == "markdown":
        return f"""
        <div class=\"component markdown\">
            <div class=\"markdown-content\">{comp['label']}</div>
        </div>
        """
    elif comp_type == "highlightedtext":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"highlighted-text\">
                <span class=\"highlight-add\">Added text</span>
                <span>Normal text</span>
                <span class=\"highlight-remove\">Removed text</span>
            </div>
        </div>
        """
    elif comp_type == "plot":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"plot-placeholder\">📊 Plot Component</div>
        </div>
        """
    elif comp_type == "html":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"html-placeholder\">🌐 HTML Component</div>
        </div>
        """
    elif comp_type == "file":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"file-upload\">
                <input type=\"file\" />
                <div class=\"file-placeholder\">📁 Drop files here or click to upload</div>
            </div>
        </div>
        """
    elif comp_type == "uploadbutton":
        return f"""
        <div class=\"component\">
            <button class=\"upload-button\">📁 {comp['label']}</button>
        </div>
        """
    return ""
