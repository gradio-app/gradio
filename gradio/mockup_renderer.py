"""
Gradio Mockup HTML Renderer Module

This module provides functionality to convert structured mockup data (generated by MockupParser)
into HTML with CSS styling that resembles the Gradio interface.

Functions:
    generate_mockup_html: Main function to generate complete HTML document from parsed mockup data.
    _render_component: Helper function to render individual components to HTML.

Example:
    >>> from gradio.mockup import MockupParser
    >>> from gradio.mockup_renderer import generate_mockup_html
    >>> ascii_art = '[textbox] "Name"\\n[button] "Submit"'
    >>> parsed = MockupParser.parse(ascii_art)
    >>> html = generate_mockup_html(parsed)
    >>> print(html[:50])
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            .gradio-
"""


def generate_mockup_html(parsed_mockup: dict) -> str:
    """
    Generate complete HTML document from parsed mockup data.
    
    This function takes structured mockup data (as generated by MockupParser)
    and converts it into a complete HTML document with embedded CSS styling
    that resembles the Gradio interface.
    
    Args:
        parsed_mockup (dict): Dictionary containing parsed mockup data with a 'layout' key.
                             The 'layout' value should be a list of component dictionaries.
                             
    Returns:
        str: Complete HTML document as a string, ready to be saved to a file.
        
    Example:
        >>> parsed_data = {
        ...     'layout': [
        ...         {'type': 'textbox', 'label': 'Name', 'lines': 1},
        ...         {'type': 'button', 'label': 'Submit'}
        ...     ]
        ... }
        >>> html = generate_mockup_html(parsed_data)
        >>> 'class="gradio-mockup"' in html
        True
        
    The generated HTML includes:
        - Responsive CSS styling that matches Gradio's appearance
        - Proper semantic HTML structure
        - Support for all component types (textbox, slider, button, checkbox)
        - Container layouts (row/column) with flexbox styling
    """
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            .gradio-mockup { 
                font-family: sans-serif; 
                max-width: 600px; 
                margin: 20px auto; 
                padding: 20px; 
                border: 1px solid #e0e0e0; 
                border-radius: 8px; 
                background: #f9f9f9; 
            }
            .component { 
                margin: 15px 0; 
                padding: 15px; 
                background: white; 
                border-radius: 4px; 
                box-shadow: 0 2px 4px rgba(0,0,0,0.05); 
            }
            .container { 
                display: flex; 
                gap: 15px; 
                margin: 15px 0; 
            }
            .row { flex-direction: row; }
            .column { flex-direction: column; }
            label { 
                display: block; 
                margin-bottom: 8px; 
                font-weight: 600; 
                color: #333; 
            }
            input[type="text"], textarea { 
                width: 100%; 
                padding: 10px; 
                border: 1px solid #ddd; 
                border-radius: 4px; 
            }
            textarea { min-height: 80px; }
            button { 
                padding: 10px 20px; 
                background: #4CAF50; 
                color: white; 
                border: none; 
                border-radius: 4px; 
                cursor: pointer; 
            }
            .slider-container { 
                padding: 15px 0; 
                width: 100%; 
            }
        </style>
    </head>
    <body>
        <div class="gradio-mockup">
    """
    
    for element in parsed_mockup["layout"]:
        if element["type"] in ["row", "column"]:
            html += f'<div class="container {element["type"]}">'  # row or column
            for comp in element["elements"]:
                html += _render_component(comp)
            html += "</div>"
        else:
            html += _render_component(element)
    
    html += "</div></body></html>"
    return html

def _render_component(comp: dict) -> str:
    """
    Render a single component to HTML.
    
    This helper function takes a component dictionary and converts it into
    the appropriate HTML representation with proper styling classes.
    
    Args:
        comp (dict): Component dictionary containing 'type' and component-specific properties.
                    Common properties include:
                    - type: Component type (textbox, slider, button, checkbox)
                    - label: Display label for the component
                    - lines: Number of lines for textbox (textbox only)
                    - min, max: Range values for slider (slider only)
                    
    Returns:
        str: HTML string representing the component, or empty string for unknown types.
        
    Example:
        >>> comp = {'type': 'textbox', 'label': 'Name', 'lines': 1}
        >>> html = _render_component(comp)
        >>> 'input type="text"' in html
        True
        >>> 'placeholder="Name"' in html
        True
        
    Supported component types:
        - textbox: Renders as <input type="text"> or <textarea> based on lines
        - slider: Renders as <input type="range"> with min/max attributes
        - button: Renders as <button> element
        - checkbox: Renders as <input type="checkbox"> with label
    """
    comp_type = comp["type"]
    if comp_type == "textbox":
        if comp["lines"] > 1:
            return f"""
            <div class=\"component\">
                <label>{comp['label']}</label>
                <textarea placeholder=\"{comp['label']}\"></textarea>
            </div>
            """
        else:
            return f"""
            <div class=\"component\">
                <label>{comp['label']}</label>
                <input type=\"text\" placeholder=\"{comp['label']}\" />
            </div>
            """
    elif comp_type == "slider":
        return f"""
        <div class=\"component\">
            <label>{comp['label']}</label>
            <div class=\"slider-container\">
                <input type=\"range\" min=\"{comp['min']}\" max=\"{comp['max']}\" value=\"{comp['min']}\" />
            </div>
        </div>
        """
    elif comp_type == "button":
        return f"""
        <div class=\"component\">
            <button>{comp['label']}</button>
        </div>
        """
    elif comp_type == "checkbox":
        return f"""
        <div class=\"component\">
            <label>
                <input type=\"checkbox\"> {comp['label']}
            </label>
        </div>
        """
    elif comp_type in ["row", "column"]:
        # Handle nested containers
        html = f'<div class="container {comp_type}">'
        for nested_comp in comp["elements"]:
            html += _render_component(nested_comp)
        html += "</div>"
        return html
    return ""
